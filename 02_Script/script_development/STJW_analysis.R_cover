data_dir<-"00_Data/Formatted_data/"
dir(data_dir)

cv17<-read.table(paste(data_dir,"cover_2017.txt",sep=""),header=T)
cv18<-read.table(paste(data_dir,"cover_2018.txt",sep=""),header=T)
cv19<-read.table(paste(data_dir,"cover_2019.txt",sep=""),header=T)
rahead(cv17,3,7)
rahead(cv18,3,7)
rahead(cv19,3,7)

#PLANT INFO:
pinfo<-read.table(paste(data_dir,"plant_info.txt",sep="/"),header=T)
pinfo$Duration<-as.factor(pinfo$Duration)
pinfo$func_grp<-as.factor(pinfo$func_grp)
pinfo$Significance<-as.factor(pinfo$Significance)
pinfo$Status<-as.factor(pinfo$Status)
head(pinfo,3); dim(pinfo)
length(which(duplicated(pinfo$Sp))) 
#is 0

#CHECK:

cvnames17<-colnames(cv17)[which(colnames(cv17)=="Aca_ovi"):ncol(cv17)]
cvnames18<-colnames(cv18)[which(colnames(cv17)=="Aca_ovi"):ncol(cv18)]
cvnames19<-colnames(cv19)[which(colnames(cv19)=="Aca_ovi"):ncol(cv19)]

#are all names matching across years?
length(cvnames17)==length(cvnames18)
length(cvnames17)==length(cvnames19)
length(cvnames18)==length(cvnames19)
#all are TRUE

table(cvnames17 %in% cvnames18)
table(cvnames17 %in% cvnames19)
table(cvnames18 %in% cvnames19)
#all TRUE 121

#Are all names in the data present in plant_info?
table(cvnames17 %in% pinfo$Sp)
table(cvnames18 %in% pinfo$Sp)
table(cvnames19 %in% pinfo$Sp) 
#FALSE 1 TRUE 120 why?

#close import data----
# FORMAT data: #----

#replace date with year:
cv17$DATE<-2017
cv18$DATE<-2018
cv19$DATE<-2019

#QUADRAT_Direction is the treatment (A, B and C):
colnames(cv17)[which(colnames(cv17)=="QUADRAT_Direction")]<-"Treatment"
colnames(cv18)[which(colnames(cv18)=="QUADRAT_Direction")]<-"Treatment"
colnames(cv19)[which(colnames(cv19)=="QUADRAT_Direction")]<-"Treatment"

#create reserve variables from PLOT_ID:
cv17$reserve<-cv17$PLOT_ID
cv17$reserve[grep("J", cv17$reserve)]<-"J"
cv17$reserve[grep("M", cv17$reserve)]<-"M"

cv18$reserve<-cv18$PLOT_ID
cv18$reserve[grep("J", cv18$reserve)]<-"J"
cv18$reserve[grep("M", cv18$reserve)]<-"M"

cv19$reserve<-cv19$PLOT_ID
cv19$reserve[grep("J", cv19$reserve)]<-"J"
cv19$reserve[grep("M", cv19$reserve)]<-"M"

# re-arrange columns:
cv17<-cv17[,c(which(colnames(cv17) %in% c("DATE", "reserve")),which(!colnames(cv17) %in% c("DATE", "reserve")))]
cv18<-cv18[,c(which(colnames(cv18) %in% c("DATE", "reserve")),which(!colnames(cv18) %in% c("DATE", "reserve")))]
cv19<-cv19[,c(which(colnames(cv19) %in% c("DATE", "reserve")),which(!colnames(cv19) %in% c("DATE", "reserve")))]

# remove unwanted columns:
cv17$QUAD_ID<-NULL
cv18$QUAD_ID<-NULL
cv19$QUAD_ID<-NULL

# factorise variables which should be factors and make control the baseline level:
cv17$reserve<-as.factor(cv17$reserve)
cv17$PLOT_ID<-as.factor(cv17$PLOT_ID)
cv17$Treatment<-factor(cv17$Treatment,levels=c("C","A","B"))


cv18$reserve<-as.factor(cv18$reserve)
cv18$PLOT_ID<-as.factor(cv18$PLOT_ID)
cv18$Treatment<-factor(cv18$Treatment,levels=c("C","A","B"))

cv19$reserve<-as.factor(cv19$reserve)
cv19$PLOT_ID<-as.factor(cv19$PLOT_ID)
cv19$Treatment<-factor(cv19$Treatment,levels=c("C","A","B"))


# replace count categories with numbers:

# >5%	A	5
# 5-10%	B	10
# 11-20%	C 	20
# 21-30%	D	30
# 31-40%	E	40
# 41-50%	F	50
# 51-60%	G	60
# 61-70%	H	70
# 71-80%	I	80
# 81-90%	J	90
# 91-100%	K	100

cv17d<-as.matrix(cv17[,which(colnames(cv17)=="Aca_ovi"):ncol(cv17)])
cv17d[which(cv17d=="A")]<-5
cv17d[which(cv17d=="B")]<-10
cv17d[which(cv17d=="C")]<-20
cv17d[which(cv17d=="D")]<-30
cv17d[which(cv17d=="E")]<-40
cv17d[which(cv17d=="F")]<-50
cv17d[which(cv17d=="G")]<-60
cv17d[which(cv17d=="H")]<-70
cv17d[which(cv17d=="I")]<-80
cv17d[which(cv17d=="J")]<-90
cv17d[which(cv17d=="K")]<-100
cv17d<-data.frame(apply(cv17d,2,as.numeric))
cv17d<-data.frame(cbind(cv17[,1:which(colnames(cv17)=="Treatment")],cv17d))

cv18d<-as.matrix(cv18[,which(colnames(cv18)=="Aca_ovi"):ncol(cv18)])
cv18d[which(cv18d=="A")]<-5
cv18d[which(cv18d=="B")]<-10
cv18d[which(cv18d=="C")]<-20
cv18d[which(cv18d=="D")]<-30
cv18d[which(cv18d=="E")]<-40
cv18d[which(cv18d=="F")]<-50
cv18d[which(cv18d=="G")]<-60
cv18d[which(cv18d=="H")]<-70
cv18d[which(cv18d=="I")]<-80
cv18d[which(cv18d=="J")]<-90
cv18d[which(cv18d=="K")]<-100
cv18d<-data.frame(apply(cv18d,2,as.numeric))
cv18d<-data.frame(cbind(cv18[,1:which(colnames(cv18)=="Treatment")],cv18d))

cv19d<-as.matrix(cv19[,which(colnames(cv19)=="Aca_ovi"):ncol(cv19)])
cv19d[which(cv19d=="A")]<-5
cv19d[which(cv19d=="B")]<-10
cv19d[which(cv19d=="C")]<-20
cv19d[which(cv19d=="D")]<-30
cv19d[which(cv19d=="E")]<-40
cv19d[which(cv19d=="F")]<-50
cv19d[which(cv19d=="G")]<-60
cv19d[which(cv19d=="H")]<-70
cv19d[which(cv19d=="I")]<-80
cv19d[which(cv19d=="J")]<-90
cv19d[which(cv19d=="K")]<-100
cv19d<-data.frame(apply(cv19d,2,as.numeric))
cv19d<-data.frame(cbind(cv19[,1:which(colnames(cv19)=="Treatment")],cv19d))
#no NAs introduced by coercion. 

# remove unidentified species (for now... but we need to discuss whether these should be included in any analyses):
unid<-pinfo$Sp[grep("Uni_", pinfo$Sp)]
pinfo<-pinfo[-which(pinfo$Sp %in% unid),]
pinfo<-tidy.df(pinfo)
head(pinfo, 3); dim(pinfo)

cv17<-cv17[,-which(colnames(cv17) %in% unid)]
cv18<-cv18[,-which(colnames(cv18) %in% unid)]
cv19<-cv19[,-which(colnames(cv19) %in% unid)]

rahead(ct17,3,7); dim(ct17)
rahead(ct18,3,7); dim(ct18)
rahead(ct19,3,7); dim(ct19)

#close format data ---

#species DIVERSITY GROUPS: #----
head(pinfo,3); dim(pinfo)
str(pinfo)

# Set-up vectors for grouping:
#all species:
all<-pinfo$Sp
native<-as.character(pinfo$Sp[which(pinfo$Status=="N")])
exotic<-as.character(pinfo$Sp[which(pinfo$Status=="E")])
(length(native)+length(exotic))==length(all) #is TRUE

#Indicator all (A+B):
indic<-as.character(pinfo$Sp[which(pinfo$Indicator==1)])

#Significance:
sigA<-as.character(pinfo$Sp[which(pinfo$Significance=="A")])
sigB<-as.character(pinfo$Sp[which(pinfo$Significance=="B")])

# The length of indic should be equal to the length of significance A and B categories:
length(pinfo$Sp[pinfo$Significance=="A"])+length(pinfo$Sp[pinfo$Significance=="B"])==length(indic) #TRUE


 
# For significance, X only has one species (Nas_tri). Combine with Y? This would make sigXY the "bad" weeds and sigZ the "not so bad" weeds:
table(pinfo$Significance)
 
sigC<-as.character(pinfo$Sp[which(pinfo$Significance=="C")])
sigXY<-as.character(pinfo$Sp[c(which(pinfo$Significance=="X"),which(pinfo$Significance=="Y"))])
sigZ<-as.character(pinfo$Sp[which(pinfo$Significance=="Z")])


# Herbs, including leguminous and non-leguminous herbs:
native_herb<-as.character(pinfo$Sp[which(pinfo$Herb==1 & pinfo$Status=="N")])
exotic_herb<-as.character(pinfo$Sp[which(pinfo$Herb==1 & pinfo$Status=="E")])



table(native_herb %in% exotic_herb) #  FALSE 43
table(exotic_herb %in% native_herb) #  FALSE 30

# Herb catgories:
exann_herb<-as.character(pinfo$Sp[which(pinfo$Herb==1 & pinfo$Status=="E" & pinfo$Duration=="Annual")])
exper_herb<-as.character(pinfo$Sp[which(pinfo$Herb==1 & pinfo$Status=="E" & pinfo$Duration=="Perennial")])
natann_herb<-as.character(pinfo$Sp[which(pinfo$Herb==1 & pinfo$Status=="N" & pinfo$Duration=="Annual")])
natper_herb<-as.character(pinfo$Sp[which(pinfo$Herb==1 & pinfo$Status=="N" & pinfo$Duration=="Perennial")])

# Non-leguminous Herbs:
native_nonlegherb<-as.character(pinfo$Sp[which(pinfo$Legume==0 & pinfo$Herb==1 & pinfo$Status=="N")])
exotic_nonlegherb<-as.character(pinfo$Sp[which(pinfo$Legume==0 & pinfo$Herb==1 & pinfo$Status=="E")])

# Leguminous Herbs:
native_legherb<-as.character(pinfo$Sp[which(pinfo$Legume==1 & pinfo$Herb==1 & pinfo$Status=="N")])
exotic_legherb<-as.character(pinfo$Sp[which(pinfo$Legume==1 & pinfo$Herb==1 & pinfo$Status=="E")])

head(pinfo,3); dim(pinfo)

# All grasses:
native_grass<-as.character(pinfo$Sp[which(pinfo$Grass==1 & pinfo$Status=="N")])
exotic_grass<-as.character(pinfo$Sp[which(pinfo$Grass==1 & pinfo$Status=="E")])

# Annual and perennial exotic Grasses 
# All native Grasses are perennial, so no need to split those
exotic_anngrass<-as.character(pinfo$Sp[which(pinfo$Duration=="Annual" & pinfo$Grass==1 & pinfo$Status=="E")])
exotic_perengrass<-as.character(pinfo$Sp[which(pinfo$Grass==1 & pinfo$Status=="E" & pinfo$Duration=="Perennial")])

# C3 and C4 Grasses:
# There are no exotic c4 grasses in this data set, so we won't look at that category
# All c4 grasses are native
c3_grass<-as.character(pinfo$Sp[which(pinfo$func_grp=="C3")])

# Sedges and rushes:
sed_rus<-as.character(pinfo$Sp[which(pinfo$func_grp=="Sedge_Rush")])

# Categories to analyse
group_df<-data.frame(group=c("all","native","exotic","indic","sigA","sigB","sigC","sigXY","sigZ","native_herb","exotic_herb","exann_herb","exper_herb","natann_herb","natper_herb","native_nonlegherb","exotic_nonlegherb","native_legherb","exotic_legherb","native_grass","exotic_grass","exotic_anngrass","exotic_perengrass","c3_grass","native_c3","native_c4","exotic_c3","sed_rus"))

# close diversity groups ----

#  calculate species DIVERSITY:    	# ----
head(pinfo,3); dim(pinfo)
head(group_df)

rahead(cv17,3,7); dim(cv17)
rahead(cv18,3,7); dim(cv18)
rahead(cv19,3,7); dim(cv19)

# Add species richness and Shannon's index to count data:

# This function returns both richness and shannon's data frames in a list:





calc.div<-function(species.data, site.data) {
  all.output<-list()
  
  rich.data<-list()
  shan.data<-list()
  
  for (i in 1:nrow(group_df)){
    
    name.thisrun<-as.character(group_df$group[i])
    vec.thisrun<-get(name.thisrun)
    
    data.thisrun<-species.data[,colnames(species.data) %in% vec.thisrun]
    head(data.thisrun,3); dim(data.thisrun) 
    
    if(length(vec.thisrun)==1){
      data.thisrun<-data.frame(data.thisrun)
      colmanes(data.thisrun)<-vec.thisrun
    }
    rich.data[[i]]<-apply(data.thisrun,1,function(x)length(which(x>0)))
    # if there is only one species in a community (quadrat), shannon's diversity == 0, regardless of how many species are in functional group i. Thus, for functional groups with only one species, the value zero for all quadrats should be zero:
    if(length(vec.thisrun)==1) shan.data[[i]]<-rep(0, nrow(data.thisrun)) else shan.data[[i]]<-diversity(data.thisrun,index="shannon")
  } #close for i
  
  rich.res<-data.frame(do.call(cbind,rich.data))
  colnames(rich,res)<-group_df$group
  rich<-cbind(site.data,rich.res)
  
  shan.res<-data.frame(do.call(cbind,shan.data))
  colnames(shan.res)<-group_df$group
  shan<-cbind(site.data, shan.res)
  
  all.output$rich<-rich
  all.output$shan<-shan

  return(all.output)  
} #close function

# CALCULATE diversity for each year separately:

cv17_site.data<-cv17[,1:which(colnames(cv17)=="Treatment")]
div17<-calc.div(cv17, cv17_site.data)
require(vegan)
div17<-calc.div(cv17, cv17_site.data)


cv17_site.data<-cv17[,1:which(colnames(cv17)=="Treatment")]
div17<-calc.div(cv17, cv17_site.data)

#Load libraries:
  library(lme4); library(vegan); library(AICcmodavg); library(lmerTest)

